{"post_content":"<!-- wp:generateblocks\/headline {\"uniqueId\":\"8fdfab24\",\"blockVersion\":3} -->\n<h2 class=\"gb-headline gb-headline-8fdfab24 gb-headline-text\">Why use Bedrock ?<\/h2>\n<!-- \/wp:generateblocks\/headline -->\n\n<!-- wp:paragraph -->\n<p>Bedrock is a Wordpress boilerplate. It is one of the best out there and it uses Composer to manage dependencies. This will allow us to easily upgrade it in a DevOps way.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Other reasons for using Bedrock:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Bedrock uses a better folder structure than what you get with your standard Wordpress installation.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>It uses Wordpress Core functionality for customizations so there's no risk of incompatibility with 3rd party plugins or themes (unless they don't follow best practices).<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>The Bedrock folder structure allows for better and easier Git integration.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>It is the most widely used Composer-based Wordpress setup.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>It's been around.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>It brings added security because its folder structure limits access to non-public files and it locks down updates and changes through the AUTOMATIC_UPDATER_DISABLED, DISALLOW_FILE_EDIT and DISALLOW_FILE_MODS configuration settings.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>It uses <a href=\"https:\/\/github.com\/vlucas\/phpdotenv\" target=\"_blank\" rel=\"noopener\" title=\"Dotenv\">Dotenv<\/a> to manage and separate environment specific configurations.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>Check out the <a href=\"https:\/\/roots.io\/bedrock\/\" target=\"_blank\" rel=\"noopener\" title=\"official documentation\">official documentation<\/a> for more information.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>For our purposes we're going to deploy Bedrock into a Docker container so it's easy to deal with during development and to deploy in <a href=\"https:\/\/kubernetes.io\/\" target=\"_blank\" rel=\"noopener\" title=\"Kubernetes\">Kubernetes<\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>First, install Bedrock (replace mysite with the name you want to give to your installation):<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><code>composer create-project roots\/bedrock mysite<\/code><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Cd into mysite and create a docker subdirectory and a docker\/Dockerfile that contains the following:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># We are going to use the PHP 8.3 FPM Alpine image. Feel free to adapt to your needs.\nFROM php:8.3-fpm-alpine AS bedrockfpm\nLABEL maintainer=\"you@youraddress.com\"\n\n# Create a phpfpm:phpfpm user and group.\nRUN addgroup -g 1000 phpfpm &amp;&amp; adduser -D -u 1000 -G phpfpm phpfpm\n# Install some dependencies - feel free to adapt to your needs.\nRUN apk add --update git openssh-client libzip-dev freetype-dev libjpeg-turbo-dev libwebp-dev libpng-dev\nRUN docker-php-ext-configure gd --with-freetype --with-webp --with-jpeg &amp;&amp; \\\n  docker-php-ext-install gd\nRUN docker-php-ext-install mysqli zip pdo pdo_mysql &amp;&amp; docker-php-ext-enable mysqli &amp;&amp; docker-php-ext-enable pdo_mysql\n\n# Install WordPress CLI\nRUN curl -o \/usr\/local\/bin\/wp https:\/\/raw.githubusercontent.com\/wp-cli\/builds\/gh-pages\/phar\/wp-cli.phar \\\n  &amp;&amp; chmod +x \/usr\/local\/bin\/wp\n\n# Install Composer\nRUN php -r \"readfile('http:\/\/getcomposer.org\/installer');\" | php -- --install-dir=\/usr\/local\/bin\/ --filename=composer\n\n# Copy local files to tune configuration (see further)\nCOPY .\/docker\/php.ini \/usr\/local\/etc\/php\/conf.d\/custom.ini\nCOPY .\/docker\/fpm.conf \/usr\/local\/etc\/php-fpm.d\/zz-fpm.conf\nCOPY --chown=1000:1000 .\/docker\/docker-entrypoint.sh \/usr\/local\/bin\/docker-entrypoint.sh\nRUN chmod +x \/usr\/local\/bin\/docker-entrypoint.sh &amp;&amp; chown 1000:1000 \/var\/www\n# Create a wwinit directory in which we will put all the files needed by our Wordpress instance. We'll copy those during exection of the entrypoint\nRUN mkdir \/var\/wwwinit &amp;&amp; chown 1000:1000 \/var\/wwwinit\n\n# Create the \/var\/www directory in which we'll install Wordpress\nWORKDIR \/var\/www\n#  Become user phpfpm\nUSER phpfpm\n\n# Copy local files to tune configuration (see further)\nCOPY --chown=1000:1000 .\/composer.json \/var\/wwwinit\/\nCOPY --chown=1000:1000 .\/docker\/wp-cli.yml \/var\/wwwinit\/\nCOPY --chown=1000:1000 .\/docker\/config\/ \/var\/wwwinit\/config\/\nCOPY --chown=1000:1000 .\/docker\/web\/ \/var\/wwwinit\/web\/\n\n# Execute our entrypoint whenever we start this container\nENTRYPOINT &#91;\"\/usr\/local\/bin\/docker-entrypoint.sh\"]\n# Ultimately we want to execute php-fpm\nCMD &#91;\"php-fpm\"]<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>The Docker file mentions a number of files that we need to create or adapt. Starting with docker\/php.ini that will be copied to \/usr\/local\/etc\/php\/conf.d\/custom.ini to alter the configuration of PHP:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Adapt to your needs.\nmemory_limit = 512M\nmax_execution_time = 300\nmax_input_vars = 5000\nupload_max_filesize = 1024M\npost_max_size = 1024M<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>We also need a docker\/fpm.conf which will be copied to \/usr\/local\/etc\/php-fpm.d\/zz-fpm.conf and which will alter the configuration of FPM:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Adapt to your needs.\n&#91;www]\npm = static\npm.max_children = 10<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>And we need our entrypoint script. Create a file docker\/docker-entrypoint.sh. It will be copied to \/usr\/local\/bin\/docker-entrypoint.sh and will be executed each time our container starts.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>#!\/bin\/sh\nset -e\nset -x\n\ncd \/var\/www\n\nif ! $(wp core is-installed); then\n\tcp -aR \/var\/wwwinit\/* \/var\/www\/\n\tcomposer install\n\n\twp core install --url=$WP_HOME \\\n\t  --title=\"$WP_NAME\" \\\n\t  --admin_user=admin \\\n\t  --admin_email=you@youraddress.com \\\n\t  --admin_password=$ADMINPASSWORD\n\n\t# Activate theme\n\twp theme activate twentytwentyfive\nfi\n\n# Execute the CMD in Dockerfile, which in our case is php-fpm\nexec \"$@\"<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>This entrypoint script detects whether Wordpress is already installed or not. If it is it doesn't do anything and starts php-fpm. If it's not, it installs Composer dependencies, Wordpress and activates a default theme. We need to pass it some environment variables to define the URL, name of the instance and admin password.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Before installing Composer, the entrypoint script copies the contents of the wwwinit directory to \/var\/www. We need to create a few files that will be copied there upon installation.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The composer.json is already there. It was created when you created the Bedrock project. We'll see later how we can modify this file to add plugins and other dependencies to our project. The web directory is already there too. It contains Wordpress Core as well as wp-config.php file and the app directory structure in which we have plugins, themes, and uploaded media. The wp-config.php is there solely because Wordpress needs it there but it actually loads configuration from the config directory. Do not modify wp-config.php. Instead, modify configuration in the config directory.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Move the wp-cli.yml file to the docker subdirectory. It will be copied to the root of our Bedrock installation. This is the configuration of WP CLI. This file tells WP CLI where our Wordpress installation is.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Move the config directory that has been created in the root directory of Bedrock during the installation of Bedrock, into the docker directory. The entrypoint script will copy it to the Bedrock installation inside the container. In the docker\/config\/environments\/ directory copy staging.php to production.php so that we have a file ready to tune our production environment.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>You should end up with the following directory structure:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code {\"fontSize\":\"small\"} -->\n<pre class=\"wp-block-code has-small-font-size\"><code>.\/.env.example\t\t\t\t\t\t\t\t\t\t# A .env example\n.\/.gitignore\t\t\t\t\t\t\t\t\t\t\t# .gitignore tailored to our Bedrock file structure\n.\/LICENSE.md\t\t\t\t\t\t\t\t\t\t# A standard LICENSE file\n.\/README.md\t\t\t\t\t\t\t\t\t\t# A standard README file\n.\/composer.json\t\t\t\t\t\t\t\t\t# Our Composer requirements\n.\/composer.lock\t\t\t\t\t\t\t\t\t# Our Composer lock file to be committed to Git\n.\/pint.json\t\t\t\t\t\t\t\t\t\t\t# Laravel Pint - opinionated PHP code style fixer for minimalists\n.\/wp-cli.yml\t\t\t\t\t\t\t\t\t\t# WP-CLI configuration\n.\/vendor\t\t\t\t\t\t\t\t\t\t\t# Composer dependencies\n.\/docker\/Dockerfile\t\t\t\t\t\t\t\t\t# Our Dockerfile\n.\/docker\/php.ini\t\t\t\t\t\t\t\t\t# PHP configuration\n.\/docker\/fpm.conf\t\t\t\t\t\t\t\t\t# FPM configuration\n.\/docker\/docker-entrypoint.sh\t\t\t\t\t\t# Our Docker entrypoint\n.\/docker\/wp-cli.yml\t\t\t\t\t\t\t\t\t# WP-CLI configuration (TODO)\n.\/docker\/config\/application.php\t\t\t\t\t\t# Our base configuration\n.\/docker\/config\/environments\/development.php\t# Configuration specific to our development environment\n.\/docker\/config\/environments\/staging.php\t\t\t# Configuration specific to our staging environment\n.\/docker\/config\/environments\/production.php\t\t# Configuration specific to our production environment\n.\/docker\/web\/app\/mu-plugins\t\t\t\t\t\t# Wordpress Must-Use plugins\n.\/docker\/web\/app\/plugins\t\t\t\t\t\t\t# Wordpress plugins\n.\/docker\/web\/app\/themes\t\t\t\t\t\t\t# Wordpress themes\n.\/docker\/web\/app\/uploads\t\t\t\t\t\t\t# Wordpress media\n.\/docker\/web\/index.php\t\t\t\t\t\t\t# PHP entrypoint\n.\/docker\/web\/wp-config.php\t\t\t\t\t\t# Redirect to config\/\n.\/docker\/web\/wp\t\t\t\t\t\t\t\t\t# Wordpress Core<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Let's build and run our container:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>docker build -t mysite -f docker\/Dockerfile .\ndocker run -d --name mysite --rm -e WP_HOME=http:\/\/localhost -e WP_NAME=mysite -e ADMINPASSWORD=password -p 9000:9000 mysite\ndocker logs -f mysite<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>You should see the following output:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code {\"fontSize\":\"small\"} -->\n<pre class=\"wp-block-code has-small-font-size\"><code>+ cd \/var\/www\n+ wp core is-installed\nError: This does not seem to be a WordPress installation.\nThe used path is: \/var\/www\/\nPass --path=`path\/to\/wordpress` or run `wp core download`.\n+ \n+ cp -aR \/var\/wwwinit\/composer.json \/var\/wwwinit\/config \/var\/wwwinit\/web \/var\/wwwinit\/wp-cli.yml \/var\/www\/\n+ composer install\nNo composer.lock file present. Updating dependencies to latest instead of installing from lock file. See https:\/\/getcomposer.org\/install for more information.\nLoading composer repositories with package information\nUpdating dependencies\nLock file operations: 18 installs, 0 updates, 0 removals\n  - Locking composer\/installers (v2.3.0)\n  - Locking graham-campbell\/result-type (v1.1.3)\n  - Locking laravel\/pint (v1.21.0)\n  - Locking oscarotero\/env (v2.1.1)\n  - Locking phpoption\/phpoption (1.9.3)\n  - Locking roave\/security-advisories (dev-latest 70eb886)\n  - Locking roots\/bedrock-autoloader (1.0.4)\n  - Locking roots\/bedrock-disallow-indexing (2.0.0)\n  - Locking roots\/wordpress (6.7.2)\n  - Locking roots\/wordpress-core-installer (1.100.0)\n  - Locking roots\/wordpress-no-content (6.7.2)\n  - Locking roots\/wp-config (1.0.0)\n  - Locking roots\/wp-password-bcrypt (1.2.0)\n  - Locking symfony\/polyfill-ctype (v1.31.0)\n  - Locking symfony\/polyfill-mbstring (v1.31.0)\n  - Locking symfony\/polyfill-php80 (v1.31.0)\n  - Locking vlucas\/phpdotenv (v5.6.1)\n  - Locking wpackagist-theme\/twentytwentyfive (1.1)\nWriting lock file\nInstalling dependencies from lock file (including require-dev)\nPackage operations: 18 installs, 0 updates, 0 removals\n  - Downloading roots\/wordpress-core-installer (1.100.0)\n  - Downloading composer\/installers (v2.3.0)\n  - Downloading symfony\/polyfill-mbstring (v1.31.0)\n  - Downloading laravel\/pint (v1.21.0)\n  - Downloading symfony\/polyfill-ctype (v1.31.0)\n  - Downloading oscarotero\/env (v2.1.1)\n  - Downloading roots\/bedrock-autoloader (1.0.4)\n  - Downloading roots\/bedrock-disallow-indexing (2.0.0)\n  - Downloading roots\/wordpress-no-content (6.7.2)\n  - Downloading roots\/wp-config (1.0.0)\n  - Downloading roots\/wp-password-bcrypt (1.2.0)\n  - Downloading symfony\/polyfill-php80 (v1.31.0)\n  - Downloading phpoption\/phpoption (1.9.3)\n  - Downloading graham-campbell\/result-type (v1.1.3)\n  - Downloading vlucas\/phpdotenv (v5.6.1)\n  - Downloading wpackagist-theme\/twentytwentyfive (1.1)\n  0\/16 &#91;&gt;---------------------------]   0%\n  3\/16 &#91;=====&gt;----------------------]  18%\n 10\/16 &#91;=================&gt;----------]  62%\n 13\/16 &#91;======================&gt;-----]  81%\n 14\/16 &#91;========================&gt;---]  87%\n 15\/16 &#91;==========================&gt;-]  93%\n 16\/16 &#91;============================] 100%\n  - Installing roots\/wordpress-core-installer (1.100.0): Extracting archive\n  - Installing composer\/installers (v2.3.0): Extracting archive\n  - Installing symfony\/polyfill-mbstring (v1.31.0): Extracting archive\n  - Installing laravel\/pint (v1.21.0): Extracting archive\n  - Installing symfony\/polyfill-ctype (v1.31.0): Extracting archive\n  - Installing oscarotero\/env (v2.1.1): Extracting archive\n  - Installing roave\/security-advisories (dev-latest 70eb886)\n  - Installing roots\/bedrock-autoloader (1.0.4): Extracting archive\n  - Installing roots\/bedrock-disallow-indexing (2.0.0): Extracting archive\n  - Installing roots\/wordpress-no-content (6.7.2): Extracting archive\n  - Installing roots\/wordpress (6.7.2)\n  - Installing roots\/wp-config (1.0.0): Extracting archive\n  - Installing roots\/wp-password-bcrypt (1.2.0): Extracting archive\n  - Installing symfony\/polyfill-php80 (v1.31.0): Extracting archive\n  - Installing phpoption\/phpoption (1.9.3): Extracting archive\n  - Installing graham-campbell\/result-type (v1.1.3): Extracting archive\n  - Installing vlucas\/phpdotenv (v5.6.1): Extracting archive\n  - Installing wpackagist-theme\/twentytwentyfive (1.1): Extracting archive\n  0\/14 &#91;&gt;---------------------------]   0%\n 12\/14 &#91;========================&gt;---]  85%\n 13\/14 &#91;==========================&gt;-]  92%\n 14\/14 &#91;============================] 100%\n3 package suggestions were added by new dependencies, use `composer suggest` to see details.\nGenerating optimized autoload files\n14 packages you are using are looking for funding.\nUse the `composer fund` command to find out more!\n+ wp core install '--url=http:\/\/localhost' '--title=mysite' '--admin_user=admin' '--admin_email=you@youraddress.com' '--admin_password=password'\nError: Error establishing a database connection. This either means that the username and password information in your `wp-config.php` file is incorrect or that contact with the database server at `localhost` could not be established. This could mean your host\u2019s database server is down.<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>This shows Composer installing its dependencies and wp core install failing because it cannot connect to a database. This is of course normal as we're missing a MariaDB container. We also wouldn't be able to test this because the FPM container needs to have a web server in front of it.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In the following chapter, we'll use docker compose to deploy a complete development stack with nginx, phpmyadmin, and SSL.<\/p>\n<!-- \/wp:paragraph -->","post_type":"post","post_status":"publish","post_name":"devops-with-wordpress-bedrock","post_title":"DevOps with Wordpress - Bedrock","post_password":"","post_date":"2025-02-19 16:55:51","post_date_gmt":"2025-02-19 16:55:51","post_excerpt":"","post_parent":null,"author":"jerome","meta":{"_aioseo_description":[null],"_aioseo_keywords":["a:0:{}"],"_aioseo_og_article_section":[""],"_aioseo_og_article_tags":["a:0:{}"],"_aioseo_og_description":[null],"_aioseo_og_title":[null],"_aioseo_title":[null],"_aioseo_twitter_description":[null],"_aioseo_twitter_title":[null],"_edit_last":"admin"},"featuredimage":"36f9b900-7cae-11e9-8e01-eccf8d1a5dd1","terms":{"category":[{"slug":"wordpress","name":"Wordpress"}],"post_tag":[{"slug":"devops","name":"DevOps"},{"slug":"wordpress","name":"Wordpress"}],"post_format":[]},"intimages":[],"extimages":[],"aioseo":{"title":null,"description":null,"keywords":null,"keyphrases":"{\"focus\":{\"keyphrase\":\"\",\"score\":0,\"analysis\":{\"keyphraseInTitle\":{\"score\":0,\"maxScore\":9,\"error\":1}}},\"additional\":[]}","page_analysis":"{\"analysis\":{\"basic\":{\"metadescriptionLength\":{\"score\":6,\"maxScore\":9,\"error\":1},\"lengthContent\":{\"score\":9,\"maxScore\":9,\"error\":0},\"isInternalLink\":{\"score\":3,\"maxScore\":9,\"error\":1},\"isExternalLink\":{\"score\":9,\"maxScore\":9,\"error\":0},\"errors\":2},\"title\":{\"titleLength\":{\"score\":9,\"maxScore\":9,\"error\":0},\"errors\":0},\"readability\":{\"contentHasAssets\":{\"error\":1,\"score\":1,\"maxScore\":5},\"paragraphLength\":{\"score\":5,\"maxScore\":5,\"error\":0},\"sentenceLength\":{\"score\":9,\"maxScore\":9,\"error\":0},\"passiveVoice\":{\"score\":9,\"maxScore\":9,\"error\":0},\"transitionWords\":{\"score\":3,\"maxScore\":9,\"error\":1},\"consecutiveSentences\":{\"score\":3,\"maxScore\":9,\"error\":1},\"subheadingsDistribution\":{\"score\":3,\"maxScore\":9,\"error\":1},\"calculateFleschReading\":{\"score\":3,\"maxScore\":9,\"error\":1},\"errors\":5}}}","primary_term":null,"canonical_url":null,"og_title":null,"og_description":null,"og_object_type":"default","og_image_type":"default","og_image_url":null,"og_image_width":null,"og_image_height":null,"og_image_custom_url":null,"og_image_custom_fields":null,"og_video":"","og_custom_url":null,"og_article_section":null,"og_article_tags":null,"twitter_use_og":"0","twitter_card":"default","twitter_image_type":"default","twitter_image_url":null,"twitter_image_custom_url":null,"twitter_image_custom_fields":null,"twitter_title":null,"twitter_description":null,"seo_score":"77","schema":"{\"blockGraphs\":[],\"customGraphs\":[],\"default\":{\"data\":{\"Article\":[],\"Course\":[],\"Dataset\":[],\"FAQPage\":[],\"Movie\":[],\"Person\":[],\"Product\":[],\"ProductReview\":[],\"Car\":[],\"Recipe\":[],\"Service\":[],\"SoftwareApplication\":[],\"WebPage\":[]},\"graphName\":\"BlogPosting\",\"isEnabled\":true},\"graphs\":[]}","schema_type":"default","schema_type_options":null,"pillar_content":"0","robots_default":"1","robots_noindex":"0","robots_noarchive":"0","robots_nosnippet":"0","robots_nofollow":"0","robots_noimageindex":"0","robots_noodp":"0","robots_notranslate":"0","robots_max_snippet":"-1","robots_max_videopreview":"-1","robots_max_imagepreview":"large","priority":null,"frequency":"default","videos":null,"video_thumbnail":null,"video_scan_date":null,"local_seo":null,"limit_modified_date":"0","options":"{\"linkFormat\":{\"internalLinkCount\":0,\"linkAssistantDismissed\":false},\"primaryTerm\":{\"productEducationDismissed\":false}}","created":"2025-02-14 16:40:44"}}