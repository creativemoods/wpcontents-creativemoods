{"post_content":"<!-- wp:paragraph -->\n<p>In this article we\u2019re going to see how to easily migrate Longhorn volumes to a CSI driver that provides storage directly from the cloud provider.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In this example, we\u2019re using Exoscale as the cloud provider but the concept is the same whatever cloud provider you\u2019re using, as long as they provide block storage through a Kubernetes CSI driver.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>This is for Exoscale SKS only, see your cloud provider documentation to find out how to do the equivalent with them.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>On your existing Exoscale SKS cluster, update the cluster to add the Exoscale Container Storage Interface addon:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">exo compute sks update \\<br>  &nbsp; &nbsp; --zone ch-gva-2 \\<br>  &nbsp; &nbsp; --enable-csi-addon \\<br>&nbsp; &nbsp; &nbsp; &lt;cluster name&gt;<\/pre>\n<!-- \/wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>We should now have at least two CSI drivers:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">$ k get csidrivers<br>NAME&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;ATTACHREQUIRED&nbsp; &nbsp;PODINFOONMOUNT&nbsp; &nbsp;STORAGECAPACITY&nbsp; &nbsp;TOKENREQUESTS&nbsp; &nbsp;REQUIRESREPUBLISH&nbsp; &nbsp;MODES&nbsp; &nbsp; &nbsp; &nbsp; AGE<br>csi.exoscale.com&nbsp; &nbsp; &nbsp;true&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;true&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;false&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&lt;unset&gt;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;false&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Persistent&nbsp; &nbsp;6m20s<br>driver.longhorn.io&nbsp; &nbsp;true&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;true&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;false&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&lt;unset&gt;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;false&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Persistent&nbsp; &nbsp;19d<\/pre>\n<!-- \/wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>and we should have at least two storage classes:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">$ k get storageclasses<br>NAME&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;PROVISIONER&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; RECLAIMPOLICY&nbsp; &nbsp;VOLUMEBINDINGMODE&nbsp; &nbsp;ALLOWVOLUMEEXPANSION&nbsp; &nbsp;AGE<br>exoscale-sbs&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;csi.exoscale.com&nbsp; &nbsp; &nbsp;Delete&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Immediate&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;true&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;6m58s<br>longhorn (default)&nbsp; &nbsp;driver.longhorn.io&nbsp; &nbsp;Retain&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Immediate&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;true&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;301d<\/pre>\n<!-- \/wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>We\u2019re going to migrate volumes from the longhorn storage class to the exoscale-sbs storage class.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>As a real-world example, let\u2019s say we have a WordPress installation deployed with Helm. It might be difficult to change its PVC name so we want to try and find a transparent way of migrating the data, keeping the same PVC name so that the application doesn\u2019t need any YAML changes.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>We\u2019re going to follow the steps below. For ease of use, we\u2019ve created a script that has some additional error control and validation features. You can find it at\u00a0<a href=\"https:\/\/github.com\/creativemoods\/movestorageclass\" target=\"_blank\" rel=\"noopener\" title=\"\">https:\/\/github.com\/creativemoods\/movestorageclass<\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>First, let\u2019s define some variables that we\u2019ll need later:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">NAMESPACE=mynamespace<br>STORAGECLASS=exoscale-sbs # Change this with the name of the storage class from your cloud provider<br>DEPLOY=mydeployment&nbsp; &nbsp; &nbsp; &nbsp;# The name of your deployment or statefulset<br>PVC=wordpress-data&nbsp;    &nbsp; &nbsp;# The name of the PVC we're migrating<br>SIZE=10Gi&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;# The size of the new PV, should be enough to fit all the data<\/pre>\n<!-- \/wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>First, we\u2019re scaling the deployment to 0 because we don\u2019t want the application to write data to the PV while we\u2019re migrating<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">kubectl scale --replicas=0 deploy\/$DEPLOY -n $NAMESPACE<\/pre>\n<!-- \/wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>then we create a new PVC and PV using the cloud provider\u2019s CSI<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">cat &gt; \/tmp\/newpvc.yaml &lt;&lt;EOF<br>apiVersion: v1<br>kind: PersistentVolumeClaim<br>metadata:<br>&nbsp; name: tmppvc<br>&nbsp; namespace: $NAMESPACE<br>spec:<br>&nbsp; accessModes:<br>&nbsp; - ReadWriteOnce<br>&nbsp; resources:<br>&nbsp; &nbsp; requests:<br>&nbsp; &nbsp; &nbsp; storage: $SIZE<br>&nbsp; storageClassName: $STORAGECLASS<br>EOF<br>kubectl apply -f \/tmp\/newpvc.yaml<\/pre>\n<!-- \/wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>Then we use a pod to mount both volumes (code from\u00a0<a href=\"https:\/\/medium.com\/@smathew.35\/copying-data-between-persistent-volumes-in-kubernetes-a-simple-guide-acc8f79c2d40\" target=\"_blank\" rel=\"noopener\" title=\"\">https:\/\/medium.com\/@smathew.35\/copying-data-between-persistent-volumes-in-kubernetes-a-simple-guide-acc8f79c2d40<\/a>)<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">cat &gt; \/tmp\/datamover.yaml &lt;&lt;EOF<br>apiVersion: apps\/v1<br>kind: Deployment<br>metadata:<br>&nbsp; labels:<br>&nbsp; &nbsp; app: data-mover<br>&nbsp; name: data-mover<br>&nbsp; namespace: $NAMESPACE<br>spec:<br>&nbsp; replicas: 1<br>&nbsp; selector:<br>&nbsp; &nbsp; matchLabels:<br>&nbsp; &nbsp; &nbsp; app: data-mover<br>&nbsp; template:<br>&nbsp; &nbsp; metadata:<br>&nbsp; &nbsp; &nbsp; labels:<br>&nbsp; &nbsp; &nbsp; &nbsp; app: data-mover<br>&nbsp; &nbsp; spec:<br>&nbsp; &nbsp; &nbsp; containers:<br>&nbsp; &nbsp; &nbsp; - args:<br>&nbsp; &nbsp; &nbsp; &nbsp; - -c<br>&nbsp; &nbsp; &nbsp; &nbsp; - while true; do ping localhost; sleep 60;done<br>&nbsp; &nbsp; &nbsp; &nbsp; command:<br>&nbsp; &nbsp; &nbsp; &nbsp; - \/bin\/sh<br>&nbsp; &nbsp; &nbsp; &nbsp; image: quay.io\/quay\/busybox<br>&nbsp; &nbsp; &nbsp; &nbsp; name: data-mover<br>&nbsp; &nbsp; &nbsp; &nbsp; volumeMounts:<br>&nbsp; &nbsp; &nbsp; &nbsp; - mountPath: \/source<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; name: source<br>&nbsp; &nbsp; &nbsp; &nbsp; - mountPath: \/destination<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; name: destination<br>&nbsp; &nbsp; &nbsp; restartPolicy: Always<br>&nbsp; &nbsp; &nbsp; volumes:<br>&nbsp; &nbsp; &nbsp; - name: source<br>&nbsp; &nbsp; &nbsp; &nbsp; persistentVolumeClaim:<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; claimName: $PVC<br>&nbsp; &nbsp; &nbsp; - name: destination<br>&nbsp; &nbsp; &nbsp; &nbsp; persistentVolumeClaim:<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; claimName: tmppvc<br>EOF<br>kubectl apply -f \/tmp\/datamover.yaml<\/pre>\n<!-- \/wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>We then copy contents from the source to the destination<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">kubectl exec -n $NAMESPACE deploy\/data-mover -- sh -c \"cp -aR \/source\/* \/destination\/\"<\/pre>\n<!-- \/wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>And we destroy data-mover as we don\u2019t need it anymore<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">kubectl -n $NAMESPACE delete deploy\/data-mover<\/pre>\n<!-- \/wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>We can now delete the original PVC. This might delete the PV but that\u2019s OK because we\u2019ve copied the data. If the PV was not deleted because its retention policy was Retain, delete the PV also.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">kubectl -n $NAMESPACE delete pvc\/$PVC<\/pre>\n<!-- \/wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>We change the Retain Policy on the new PV so that we can delete its PVC while keeping the PV<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">PV=$(kubectl get pvc tmppvc -n $NAMESPACE -o=json | jq -r '.spec.volumeName')<br>kubectl patch pv $PV -p '{\"spec\":{\"persistentVolumeReclaimPolicy\":\"Retain\"}}'<\/pre>\n<!-- \/wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>and we delete the new PVC tmppvc<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">kubectl -n $NAMESPACE delete pvc\/tmppvc<\/pre>\n<!-- \/wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>We remove the claimref from the new PV, otherwise we won\u2019t be able to reassociate the PV and PVC<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">kubectl patch pv $PV --type json -p '[{\"op\": \"remove\", \"path\": \"\/spec\/claimRef\"}]'<\/pre>\n<!-- \/wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>and we recreate a new PVC with the same name as the original PVC and we specify that we want to bind to the new PV<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">cat &gt; \/tmp\/bindpvc.yaml &lt;&lt;EOF<br>apiVersion: v1<br>kind: PersistentVolumeClaim<br>metadata:<br>&nbsp; name: $PVC<br>&nbsp; namespace: $NAMESPACE<br>spec:<br>&nbsp; accessModes:<br>&nbsp; - ReadWriteOnce<br>&nbsp; resources:<br>&nbsp; &nbsp; requests:<br>&nbsp; &nbsp; &nbsp; storage: $SIZE<br>&nbsp; volumeName: $PV<br>&nbsp; storageClassName: $STORAGECLASS<br>EOF<br>kubectl apply -f \/tmp\/bindpvc.yaml<\/pre>\n<!-- \/wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>Now we wait until the PVC has status Bound. This should happen automatically. Finally, we start our application back up<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">kubectl scale --replicas=1 deploy\/$DEPLOY -n $NAMESPACE<\/pre>\n<!-- \/wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>Our application should now be up and running and using data from our CSI instead of Longhorn.<\/p>\n<!-- \/wp:paragraph -->","post_type":"post","post_status":"publish","post_name":"how-to-migrate-longhorn-volumes-to-a-csi","post_title":"How to migrate Longhorn volumes to a CSI","post_password":"","post_date":"2024-06-20 10:25:00","post_date_gmt":"2024-06-20 09:25:00","post_excerpt":"","post_parent":null,"author":"jerome","meta":{"_aioseo_description":["How to easily migrate Longhorn volumes to a CSI driver that provides storage directly from the cloud provider."],"_aioseo_keywords":["a:0:{}"],"_aioseo_og_article_section":[""],"_aioseo_og_article_tags":["a:0:{}"],"_aioseo_og_description":[null],"_aioseo_og_title":[null],"_aioseo_title":[null],"_aioseo_twitter_description":[null],"_aioseo_twitter_title":[null],"_edit_last":"admin","_wp_old_date":["2025-02-05"]},"featuredimage":"how-to-migrate-longhorn-volumes","terms":{"category":[{"slug":"kubernetes","name":"Kubernetes"}],"post_tag":[],"post_format":[]},"intimages":[],"extimages":[],"aioseo":{"title":null,"description":"How to easily migrate Longhorn volumes to a CSI driver that provides storage directly from the cloud provider.","keywords":null,"keyphrases":"{\"focus\":{\"keyphrase\":\"\",\"score\":0,\"analysis\":{\"keyphraseInTitle\":{\"score\":0,\"maxScore\":9,\"error\":1}}},\"additional\":[]}","page_analysis":"{\"analysis\":{\"basic\":{\"metadescriptionLength\":{\"score\":6,\"maxScore\":9,\"error\":1},\"lengthContent\":{\"score\":9,\"maxScore\":9,\"error\":0},\"isInternalLink\":{\"score\":3,\"maxScore\":9,\"error\":1},\"isExternalLink\":{\"score\":9,\"maxScore\":9,\"error\":0},\"errors\":2},\"title\":{\"titleLength\":{\"score\":9,\"maxScore\":9,\"error\":0},\"errors\":0},\"readability\":{\"contentHasAssets\":{\"error\":1,\"score\":1,\"maxScore\":5},\"paragraphLength\":{\"score\":5,\"maxScore\":5,\"error\":0},\"sentenceLength\":{\"score\":9,\"maxScore\":9,\"error\":0},\"passiveVoice\":{\"score\":9,\"maxScore\":9,\"error\":0},\"transitionWords\":{\"score\":3,\"maxScore\":9,\"error\":1},\"consecutiveSentences\":{\"score\":9,\"maxScore\":9,\"error\":0},\"subheadingsDistribution\":{\"score\":2,\"maxScore\":9,\"error\":1},\"calculateFleschReading\":{\"score\":9,\"maxScore\":9,\"error\":0},\"errors\":3}}}","primary_term":null,"canonical_url":null,"og_title":null,"og_description":null,"og_object_type":"default","og_image_type":"default","og_image_url":null,"og_image_width":null,"og_image_height":null,"og_image_custom_url":null,"og_image_custom_fields":null,"og_video":"","og_custom_url":null,"og_article_section":null,"og_article_tags":null,"twitter_use_og":"0","twitter_card":"default","twitter_image_type":"default","twitter_image_url":null,"twitter_image_custom_url":null,"twitter_image_custom_fields":null,"twitter_title":null,"twitter_description":null,"seo_score":"82","schema":"{\"blockGraphs\":[],\"customGraphs\":[],\"default\":{\"data\":{\"Article\":[],\"Course\":[],\"Dataset\":[],\"FAQPage\":[],\"Movie\":[],\"Person\":[],\"Product\":[],\"ProductReview\":[],\"Car\":[],\"Recipe\":[],\"Service\":[],\"SoftwareApplication\":[],\"WebPage\":[]},\"graphName\":\"BlogPosting\",\"isEnabled\":true},\"graphs\":[]}","schema_type":"default","schema_type_options":null,"pillar_content":"0","robots_default":"1","robots_noindex":"0","robots_noarchive":"0","robots_nosnippet":"0","robots_nofollow":"0","robots_noimageindex":"0","robots_noodp":"0","robots_notranslate":"0","robots_max_snippet":"-1","robots_max_videopreview":"-1","robots_max_imagepreview":"large","priority":null,"frequency":"default","videos":null,"video_thumbnail":null,"video_scan_date":null,"local_seo":null,"limit_modified_date":"0","options":"{\"linkFormat\":{\"internalLinkCount\":0,\"linkAssistantDismissed\":false},\"primaryTerm\":{\"productEducationDismissed\":false}}","created":"2025-02-05 10:25:49"}}